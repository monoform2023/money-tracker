// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: "AIzaSyCxDMO5lChjHai2hjAk4QB0MRzPlpU37Xc",
  authDomain: "money-tracker-d35c7.firebaseapp.com",
  projectId: "money-tracker-d35c7",
  storageBucket: "money-tracker-d35c7.firebasestorage.app",
  messagingSenderId: "145469004313",
  appId: "1:145469004313:web:31c32c771bf3250d5ca888"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = firebase.initializeApp(firebaseConfig);
const database = firebase.database();

let cashBalance = 0;
let cardBalance = 0;

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase
function loadData() {
    const transactionsRef = database.ref('transactions');
    transactionsRef.on('value', (snapshot) => {
        const data = snapshot.val();
        if (data) {
            history = Object.values(data);
            updateBalances();
            updateHistory();
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function addTransaction() {
    const type = document.getElementById("type").value;
    const method = document.getElementById("method").value;
    const amount = parseFloat(document.getElementById("amount").value);
    const description = document.getElementById("description").value;

    if (isNaN(amount) || amount <= 0) {
        alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!");
        return;
    }

    const transaction = {
        date: new Date().toLocaleString(),
        type: type,
        method: method,
        amount: amount,
        description: description
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase
    const transactionsRef = database.ref('transactions');
    transactionsRef.push(transaction);

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    document.getElementById("amount").value = "";
    document.getElementById("description").value = "";
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
function updateBalances() {
    cashBalance = 0;
    cardBalance = 0;

    history.forEach(transaction => {
        if (transaction.type === "–¥–æ—Ö–æ–¥") {
            if (transaction.method === "–Ω–∞–ª–∏—á–Ω—ã–µ") cashBalance += transaction.amount;
            else if (transaction.method === "–±–µ–∑–Ω–∞–ª") cardBalance += transaction.amount;
        } else if (transaction.type === "—Ä–∞—Å—Ö–æ–¥") {
            if (transaction.method === "–Ω–∞–ª–∏—á–Ω—ã–µ") cashBalance -= transaction.amount;
            else if (transaction.method === "–±–µ–∑–Ω–∞–ª") cardBalance -= transaction.amount;
        }
    });

    document.getElementById("cashBalance").textContent = cashBalance.toFixed(2);
    document.getElementById("cardBalance").textContent = cardBalance.toFixed(2);
    document.getElementById("totalBalance").textContent = (cashBalance + cardBalance).toFixed(2);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function updateHistory() {
    const tbody = document.querySelector("#historyTable tbody");
    tbody.innerHTML = "";

    history.forEach((transaction, index) => {
        const row = document.createElement("tr");
        row.classList.add(transaction.type === "–¥–æ—Ö–æ–¥" ? "income-row" : "expense-row");

        row.innerHTML = `
            <td>${transaction.date.split(",")[0]}</td>
            <td>${transaction.method}</td>
            <td>${transaction.amount.toFixed(2)}</td>
            <td>${transaction.description}</td>
            <td><button class="delete-btn" onclick="deleteTransaction('${transaction.id}')">üóëÔ∏è</button></td>
        `;
        tbody.appendChild(row);
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function deleteTransaction(id) {
    const transactionRef = database.ref(`transactions/${id}`);
    transactionRef.remove();
}

// –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
function analyzeByDateRange() {
    const startDate = new Date(document.getElementById("startDate").value);
    const endDate = new Date(document.getElementById("endDate").value);

    if (isNaN(startDate) || isNaN(endDate)) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç!");
        return;
    }

    const analysis = { –¥–æ—Ö–æ–¥: 0, —Ä–∞—Å—Ö–æ–¥: 0 };
    history.forEach(transaction => {
        const transactionDate = new Date(transaction.date);
        if (transactionDate >= startDate && transactionDate <= endDate) {
            analysis[transaction.type] += transaction.amount;
        }
    });

    const result = `
        <h3>–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥</h3>
        <p>–î–æ—Ö–æ–¥: ${analysis.–¥–æ—Ö–æ–¥.toFixed(2)}</p>
        <p>–†–∞—Å—Ö–æ–¥: ${analysis.—Ä–∞—Å—Ö–æ–¥.toFixed(2)}</p>
    `;
    document.getElementById("analysisResult").innerHTML = result;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadData();